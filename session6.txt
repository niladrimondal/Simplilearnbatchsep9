We will use Jenkins Deployed on top of Ubuntu

1. we will build a addressbook application
2. Deploy the same on top of Tomcat

install tomcat on top of ubuntu
sudo apt install tomcat9
sudo apt install tomcat9-admin
systemctl status tomcat9.service


Both are running in the same vm
Jenkins 8080 port
Tomcat 8080 port

#to change the tomcat port 
/var/lib/tomcat9/conf/server.xml

 <Connector port="8081" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
#Add roles and user 
/var/lib/tomcat9/conf/tomcat-users.xml
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-jmx"/>
  <role rolename="manager-status"/>
  <role rolename="admin-gui"/>
  <role rolename="admin-script"/>
  <user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status, admin-gui, admin-script"/>
</tomcat-users>

#Please makesure you restart the tomcat
systemctl restart tomcat9.service


# on Jenkins Install the plugin 
Deploy to container



#
nexus
Azure Devops Artifact repo

Artifact

Build 

.jar
.war.
.ear



Deploy


######Deploy Pipeline
Declarative pipeline

pipeline {
    agent any
    tools{
        maven 'myMaven'
    }

    stages {
        stage('Checkout the Source Code') {
            steps {
                echo 'Checkout the code..........................................'
                git 'https://github.com/niladrimondal/addressbook-demo.git'
            }
        }
        stage('Build The Source Code') {
            steps{
			    script{
				     try{
                       echo 'Build the Source Code ....................................'
                       sh "mvn clean package"
					 }
					 catch(Exception e){
                         echo 'handling the exception ...................................'
                         emailext body: '''Hello Developer,

                         The Job got failed during Build.

                         Thanks,
                         Devops''', subject: 'Attention: $(JOB_NAME) is failed. Please look into the Build Number $(BUILD_NUMBER)', to: 'niladrimondal.mondal@gmail.com'
                    }
				
				}
                
            }
        }
        stage('Deploy the Application') {
            steps {
                echo 'Deploy the Application.....................................'
                deploy adapters: [tomcat9(credentialsId: 'tomcat-cred', path: '', url: 'http://54.158.200.34:8081/')], contextPath: 'addressbookssimplilearn', war: '**/*.war'
            }
        }
    }
}

https://phoenixnap.com/kb/install-tomcat-ubuntu

To deploy a application usingng jenkins to tomcat install below plugin "Deploy to Container"
+++++++++++++++++++++++++++++++++++++
https://blog.devgenius.io/understanding-the-differences-between-jenkins-scripted-and-declarative-pipeline-a-comprehensive-960826e26c2#:~:text=Differences%20between%20Scripted%20and%20Declarative%20Pipeline&text=Flexibility%3A%20Scripted%20Pipeline%20provides%20more,simpler%20and%20more%20structured%20syntax.
Scripted Pipeline:

Scripted Pipeline is the original pipeline syntax for Jenkins, and it is based on Groovy scripting language. In Scripted Pipeline, the entire workflow is defined in a single file called a Jenkinsfile. The Jenkinsfile is written in Groovy and is executed by the Jenkins Pipeline plugin. Scripted Pipeline provides a lot of flexibility and control over the workflow, but it can be more complex and verbose than Declarative Pipeline. 

Declarative pipeline
Declarative Pipeline is a more recent addition to Jenkins and provides a more structured and simpler syntax for defining pipelines. Declarative Pipeline is based on the Groovy programming language, but it uses a YAML-based syntax for defining the pipeline. The main benefit of Declarative Pipeline is its readability and ease of use, as it is designed to be more intuitive and less verbose than Scripted Pipeline.

Example of Scripted Pipeline:

node{
    stage('Code Chekout'){
        git 'https://github.com/niladrimondal/addressbook-demo.git'
    }
    stage('Build the source code'){
        sh 'mvn clean package'
    }
    stage('Deploy'){
        deploy adapters: [tomcat9(credentialsId: 'tomcat-cred', path: '', url: 'http://54.183.235.158:8081/')], contextPath: 'addressbooksc', war: '**/*.war'
    }
}


To Restrict the jobs into a node:
https://stackoverflow.com/questions/63182461/jenkins-restrict-jobs-to-certain-nodes

Github Webhook
https://www.blazemeter.com/blog/how-to-integrate-your-github-repository-to-your-jenkins-project









################################Ansible######################################
Controller node
Hosts

#Install Ansible on Ubuntu 
https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible

+++++++++++++++++++++++++++++++
cd /etc/ansible
cat /etc/ansible
# Since Ansible 2.12 (core):
# To generate an example config file (a "disabled" one with all default settings, commented out):
#               $ ansible-config init --disabled > ansible.cfg
#
# Also you can now have a more complete file by including existing plugins:
# ansible-config init --disabled -t all > ansible.cfg

# For previous versions of Ansible you can check for examples in the 'stable' branches of each version
# Note that this file was always incomplete  and lagging changes to configuration settings

# for example, for 2.9: https://github.com/ansible/ansible/blob/stable-2.9/examples/ansible.cfg

+++++++++++++++++++++++++++++++++++++++
copy the key to controller node and use the same key to create the host nodes
scp -i key.pem key.pem ubuntu@3.94.201.190:/home/ubuntu 

#Set the host node in anible controller node /etc/ansible/hosts with private key
[SL]
172.31.84.51 ansible_ssh_private_key_file=/home/ubuntu/key.pem ansible_user=ubuntu

#Change the mode of key file in /home/ubuntu
chmod 600 Key.pem

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#check the setup
ansible -m setup localhost

ansible -m ping SL


ansible -m ping localhost

ansible SL -a"touch niladri"
