Terraform:

what is terraform?
IaC: Infrastructure As a Code

problem statement:
I need deploy few cloud services:
Dev: Test: Production
1000 VM :  
10 DB RDS
Elastic Beanstalk
S3 buskcts 
EKS
VPC
SG
PUblic ips

4weeks of time 
excel : configuration for your vm
 db 
 
all the other services 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Developer : Maintaing Application Source COde in Repository

OPs/Devops Team : Source COde regarding the Infrastructure and configuration
IaC: Terraform support  aws azure gcp alibaba 

Azure IaC: ARM we can with bicep

AWS : cloudformation teamplate 

hybrid cloud: ARM or Cloudformation/

Terraform Workflow:
Terrafrom init
Terraform validate
Terraform Plan 
Terraform apply

Terraform destory

Installation: 
https://developer.hashicorp.com/terraform/downloads

ubuntu@ip-172-31-57-73:~/terraformexercise$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.20.0...
- Installed hashicorp/aws v5.20.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

++++++++++++++++++++++++++++++
host a application create the terraform script to setup the infrastructure
using docker I am going to host the application ontop of a ec2-instance

host addressbook application in a vm

1. Setup a security
2. open inbound port 8080
3. outbound port all traffic
4. setup a vm(ec2 instance) with the above security group
5. userdata :
   set of instruction you can provide during the vm creation
   


Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  metadata      Metadata related commands
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  test          Experimental support for module integration testing
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

export AWS_ACCESS_KEY_ID=""
export AWS_SECRET_ACCESS_KEY=""
export AWS_REGION=""
###optional
export AWS_SESSION_TOKEN=""

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#Configuration file main.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

resource "aws_s3_bucket" "sas3" {

  bucket = "sg-niladri-12345"
  acl    = "private"
  tags   = {
    Name = "SG Bucket"
    Environment = "dev"
  }

}

resource "aws_instance" "sgvm" {
  ami = "ami-053b0d53c279acc90"
  instance_type = "t2.nano"
  key_name = "terraform"
  tags = {
    Name = "sgterraform"
  }
}

+++++++++++++++++++++++++++++++++++
terraform state list
terraform state pull
+++++++++++++++++++++++++++++++++++
Requirement is that open the AWS console and Get the deployed vm Public IP and Hist the same with the addressbook url

http://<publicip>:8080/addressbook


steps:
I am going to use containerization approach

1. Setup a Security group
2. Open the inbound port 8080
3. Open the outboud port all trfic
4. setup a vm (which is depndent on security group)
5. userdata :
	set of instruction you can provide to ur vm when it bootstrap 
	
++++++++++++++++++++++++++++
# for authentication you create a creds.tf file

provider "aws" {
  access_key = ""
  secret_key = ""
  region = ""
  #####optional
  token = ""
}
+++++++++++++++++++++++++++++
########addressbook.sh

#!/bin/bash
apt-get update
apt-get install docker.io -y
docker run -itd -p 8080:8080 niladrimondaldcr/addressbook:1.0

+++++++++++++++++++++++++++++
############# main.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = "vpc-070d579448cbba87f"

  ingress {
    description      = "TLS from addressbook"
    from_port        = 8080
    to_port          = 8080
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_tls_addressbook"
  }
}

resource "aws_instance" "addressbookvm" {
  ami    =    "ami-0f8e81a3da6e2510a"
  instance_type = "t2.micro"
  key_name = "jeinkis-server-key"
  tags = {
    Name: "addressbookvm"
  }
  vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]
  user_data = file("${path.module}/addressbook.sh")
}

++++++++++++++++++++++++++++++++++++++++++++++++++

   
++++++++++++++++++++++++++Kubernetes/ k8s++++++++++++++++++++++++++++++++++++++

Orchastration tool

create docker container 

docker daemon for n number of container

maintain those, schedule those , load balancing dependency. ha , auto scaling , how you can do the 
with docker container?

I am from monitoring Team :

1. take care of application container 
2. LB container auto scaling scheduling 

Master component

conatiner 

pod --> multiple containers or single container















