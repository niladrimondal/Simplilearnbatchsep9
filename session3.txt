Version Control

SCM - Source Code management

Local (Local version)
Centralized Repository(10-15yrs)
Distributed Repository

git -- tool (to interact with Remote repository) 
create our local repository


Developer1
Developer2 

1. Login page (Developer1)
2. PatmentGateway (Developer2)


++++++++++++++++++++++++++
SCM : Source Code Management

Benefits:
Version Control
Backup
Collaborations
Generating Release node

Version Control System:

Centralized 
Distributed

Pull Request: PR


SCM (Purpose)
1.	Track the modification to a source code repository.
2.	Maintain all the history. it will also  help us to resolve the conflict
3.	Version control
Benefit:
1.	Backup of the code
2.	Version history
3.	Generate release note.
4.	Work together in teams
Source code Management tools:
1.	Git 
2.	Bitbucket
3.	Subversion 
4.	Gitlab
5.	Github
What is Git:
Git is a version control system for tracking changes in computer files.

Github: Web based git repositories

Bitbucket: 
Gitlab




create folder

#intialize the git

git init

#Add the Staging
git add .

#check the status
git status

#remove the file from stage location
git rm --cached file2 

#commit to local repo
git commit -m ""

#one time setup after git installation
git config --global user.email "niladrisankarmondal.mondal@gmail.com"

git config --global user.name "NiladriSMondal"

+++++++++++++++++++++++++++++++++
Create remote repository and add the same with your local repository



.gitignorefile

git remote set-url origin <remoteurl>

++++++++++++++++++++++++++++++


#create git hub account

#add the origin in the local repository

git remote add origin <<git repo links>>

#push your local repo changes to remote repo
git push -u origin master
++++++++++++++++++++++++++

add .gitignorefile

add some file pattern to ignore the same 

++++++++++++++++++++
#check the commit log
git log --oneline
#check the commit log graph mode
git log --oneline --graph

++++++++++++++++++++++

#if changes are there in remote repo

git pull origin <branchname>


+++++++++++++++++++++++++++++++++
#to clone a repository
git clone <remote repo url>

+++++++++++++++
#create branch name
git branch <branch name>


+++++++++++++++++++++++++++++
#create git branch 
git branch new_branch

#rename git branch
git branch -m old_name new_branch1
 
#delete git branch 
git branch -d new_branch
 
++++++++++
#move to another branch
git checkout branchname
git switch branchname

#create and move to new branch 
 git branch -b <new branch>
 git branch -c <new branch>
#merge the changes to the branch 
git merge <branch name>